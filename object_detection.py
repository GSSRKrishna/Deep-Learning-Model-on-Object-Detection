# -*- coding: utf-8 -*-
"""object detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vXvu0lerKQmBFOwmYMNS0vAYsHieuMQ9

**object detection**

importing llibraries:
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

"""loading necessary files:"""

yolo = cv2.dnn.readNet("/content/drive/MyDrive/yolov3.weights","/content/drive/MyDrive/yolov3.cfg")

"""importing classes:"""

classes = []
with open("/content/drive/MyDrive/coco.names",'r') as f:
  classes = f.read().splitlines()

print(classes)
print(len(classes))

"""loading image:"""

img =  cv2.imread("/content/image9.jpg")

height,width,channels=img.shape

"""coverting into RGB format:"""

blob = cv2.dnn.blobFromImage(img, 1/255, (320,320),(0,0,0), swapRB=True , crop=False)

blob.shape

#printing img
i = blob[0].reshape(320,320,3)
plt.imshow(i)
#it is divided into three channels

"""setting up input image:"""

yolo.setInput(blob)

"""Defining output layer:"""

output_layer_name = yolo.getUnconnectedOutLayersNames()
layeroutput = yolo.forward(output_layer_name)

"""to generate Bounding boxes: """

boxes = []
confidences = []
class_ids = []

for output in layeroutput:
  for detection in output:
    score = detection[5:]
    class_id = np.argmax(score)
    confidence = score[class_id]
    if confidence > 0.7:
      center_x = int(detection[0]*width)
      center_y = int(detection[1]*height)
      w =  int(detection[2]*width)
      h =  int(detection[3]*height)

      x = int(center_x- w/2)
      y = int(center_y- h/2)

      boxes.append([x,y,w,h])
      confidences.append(float(confidence))
      class_ids.append(class_id)

"""adding boxes to image:"""

indexes = cv2.dnn.NMSBoxes(boxes, confidences , 0.5, 0.4)

"""adding font and confidence to our image:"""

font = cv2.FONT_HERSHEY_PLAIN
colors = np.random.uniform(0,255,size=(len(boxes),3))

"""adding bounding boxes objects:"""

for i in range(len(boxes)):
  if i in indexes:
    x,y,w,h = boxes[i]

    label = str(classes[class_ids[i]])
    confi = str(round(confidences[i],2))
    color = colors[i]

    cv2.rectangle(img, (x,y),(x+w,y+h),color,1)
    cv2.putText(img, label+" "+confi,(x,y+20),font,2,(255,255,255),7)

plt.imshow(img)